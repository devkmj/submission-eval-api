generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 학생
model Student {
  id          BigInt       @id @default(autoincrement()) @map("id")
  studentName String       @map("student_name")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  submissions Submission[]

  @@map("students")
}

model Submission {
  id            BigInt           @id @default(autoincrement()) @map("id")
  studentId     BigInt           @map("student_id")
  componentType String           @map("component_type")
  submitText    String           @map("submit_text")
  score         Int?             @map("score")
  feedback      String?          @map("feedback")
  highlights    Json?            @map("highlights")
  highlightText String?          @map("highlight_text")
  apiLatencyMs  Int?             @map("api_latency_ms")
  traceId       String?          @map("trace_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  status        SubmissionStatus @default(PENDING) @map("status")
  retryCount    Int              @default(0) @map("retry_count")

  logs          SubmissionLog[]
  revisions     Revision[]
  media         SubmissionMedia?
  student       Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, componentType])
  @@index([studentId, componentType])
  @@map("submissions")
}

model SubmissionMedia {
  id           BigInt     @id @default(autoincrement())
  meta         Json?
  audioUrl     String?
  createdAt    DateTime   @default(now())
  submissionId BigInt     @unique
  updatedAt    DateTime   @updatedAt
  videoUrl     String?
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@map("submission_media")
}

model SubmissionLog {
  id           BigInt      @id @default(autoincrement())
  traceId      String
  uri          String
  method       String
  httpStatus   Int
  resultStatus String
  latencyMs    Int
  message      String?
  submissionId BigInt?
  createdAt    DateTime    @default(now())
  submission   Submission? @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
  @@index([traceId])
  @@index([createdAt])
}

model ExternalCallLog {
  id           BigInt   @id @default(autoincrement())
  traceId      String
  category     String
  endpoint     String?
  method       String?
  httpStatus   Int?
  resultStatus String
  latencyMs    Int
  message      String?
  createdAt    DateTime @default(now())

  @@index([traceId])
  @@index([category, createdAt])
}

model Revision {
  id           BigInt         @id @default(autoincrement()) @map("id")
  submissionId BigInt         @map("submission_id")
  status       RevisionStatus @default(REQUESTED) @map("status")
  score        Int?           @map("score")
  feedback     String?        @map("feedback")
  highlights   Json?          @map("highlights")
  apiLatencyMs Int?           @map("api_latency_ms")
  traceId      String?        @map("trace_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  submission   Submission     @relation(fields: [submissionId], references: [id])

  @@index([submissionId, createdAt])
  @@map("revisions")
}

model StatsDaily {
  day       DateTime @id @map("day")
  total     Int      @map("total")
  success   Int      @map("success")
  failed    Int      @map("failed")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stats_daily")
}

model StatsWeekly {
  weekStart DateTime @id @map("week_start")
  total     Int      @map("total")
  success   Int      @map("success")
  failed    Int      @map("failed")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stats_weekly")
}

model StatsMonthly {
  monthStart DateTime @id @map("month_start")
  total      Int      @map("total")
  success    Int      @map("success")
  failed     Int      @map("failed")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("stats_monthly")
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum RevisionStatus {
  REQUESTED
  PROCESSING
  COMPLETED
  FAILED
}
